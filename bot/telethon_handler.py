from telethon import TelegramClient, events
from config import api_id, api_hash, chat_id, blacklist, eta_limit, frequency_limit
from utils.logger import write_log
from bot.aiogram_handler import bot
from utils.market import mexc_check
import re
import datetime

client = TelegramClient("DCA", api_id, api_hash)
mesid = 0


@client.on(events.NewMessage(chats=-1002599723862))
async def handler(event):
    global mesid
    side = None
    ticker_match = None

    if event.message.reply_to_msg_id == mesid:
        await bot.send_message(chat_id, f"–ó–º—ñ–Ω–∞ –°—Ç–∞—Ç—É—Å—É!")
        await event.message.forward_to("@FineDcaFilter")
        return

    text = event.message.message.lower()
    frequency = (lambda m: int(float(m[0]) * (1000 if m[1] == "k" else 1)))(re.search(r"frequency: \$([\d.]+)(k?)", text).groups())
    eta_match = re.search(r"eta:\s*(?:(\d+)h)?\s*,?\s*(?:(\d+)m)?", text)
    ehours = int(eta_match.group(1)) if eta_match and eta_match.group(1) else 0
    eminutes = int(eta_match.group(2)) if eta_match and eta_match.group(2) else 0
    eta = ehours + eminutes / 60

    if "üü©" in text:
        side = "üü© Long"
        ticker_match = re.search(r"buying \s*([^\s-]+)", text)
    elif "üü•" in text:
        side = "üü• Short"
        ticker_match = re.search(r"selling \s*([^\s-]+)", text)
    ticker = ticker_match.group(1).upper()

    write_log(ticker, "\n–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª")
    write_log(ticker, "–†–æ–∑–ø–æ—á–∞—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")

    if frequency > frequency_limit:
        write_log(ticker, f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –ß–∞—Å—Ç–æ—Ç—É {frequency}")

        if eta < eta_limit:
            write_log(ticker, f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –î–æ–≤–∂–∏–Ω—É DCA {eta}")

            if "range: ‚ùå" not in text:
                write_log(ticker, "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ range")

                if not any(word in ticker for word in blacklist):
                    write_log(ticker, "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ blacklist")

                    if await mexc_check(ticker):
                        write_log(ticker, "‚úÖ –¢–æ–∫–µ–Ω —î –Ω–∞ MEXC")

                        now = datetime.datetime.now()
                        delta = datetime.timedelta(hours=eta)
                        close_time_form = now + delta
                        close_time = close_time_form.strftime("%H:%M")

                        await event.message.forward_to("@FineDcaFilter")
                        await bot.send_message(chat_id, f"{side}\n–¢—ñ–∫–µ—Ä: <b>{ticker}</b>\nüïí –ó–∞–∫—Ä–∏—Ç—Ç—è –æ {close_time}",
                                         parse_mode="HTML")
                        mesid = event.message.id
                        write_log(ticker, "‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

                    else: write_log(ticker, "‚ùå –ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –Ω–∞ MEXC")
                else: write_log(ticker, "‚ùå –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ blacklist")
            else: write_log(ticker, "‚ùå –Ñ Range: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
        else: write_log(ticker, f"‚ùå–°–∏–ª—å–Ω–æ –¥–æ–≤–≥–∞ DCA: {eta}")
    else: write_log(ticker, f"‚ùå –î—É–∂–µ –º–∞–ª–µ–Ω—å–∫–∞ —á–∞—Å—Ç–æ—Ç–∞ –∫—É–ø—ñ–≤–ª—ñ: {frequency}")
